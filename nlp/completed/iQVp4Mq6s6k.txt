{"text":"{|6161|/n/ /b/Computing alignments/ |}{|8701|/n/Edit distance isn't sufficient|}{|22981|/n/ -we often need to align each character of two strings to each other|}{|25823|/n/We keep a backtrace to compute the alignment|}{|31963|/n/ /b/Edit distance/ |}{|51163|/n/We put in the values we saw in the earlier video for intention vs execution|}{|72483|/n/We ask how we reached a certain value?|}{|104303|/n/We choose one of the different minimum paths we came from|}{|125423|/n/An example of a case where there is a difference in the paths|}{|179223|/n/Do this for the full array and find the result|}{|195243|/n/For the final alignment - we can trace back and get the alignment and get our cells|}{|232103|/n/ /b/Adding backtrace to minimum edit distance/ |}{|237663|/n/Take the min distance algorithm and simply add pointers|}{|260203|/n/ /b/The distance matrix/ |}{|274483|/n/Any non-decreasing path going from origin to end corresponds to an alignment of the two sequences|}{|291923|/n/An optimal alignment is composed of optimal subsequences|}{|300966|/n/ /b/Result of backtrace/ |}{|301906|/n/Two strings and the alignment between them|}{|316046|/n/ /b/Performance/ |}{|318907|/n/Time: O(nm)|}{|331687|/n/Space: O(nm)|}{|335727|/n/Backtrace: O(n+m)|}","css":"","videoid":"iQVp4Mq6s6k","title":"3 - 3 - Backtrace for Computing Alignments - Stanford NLP - Professor Dan Jurafsky & Chris Manning","duration":355}